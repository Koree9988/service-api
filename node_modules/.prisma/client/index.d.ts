
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model fault_data
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 */
export type fault_data = {
  id: number
  magnitute: number
  date_utc: Date
  fault_id: number | null
  created_at: Date
  updated_at: Date
}

/**
 * Model faults
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 */
export type faults = {
  fault_id: number
  fault_name: string
  created_at: Date
  updated_at: Date
}

/**
 * Model raw_data
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 */
export type raw_data = {
  raw_id: number
  date_utc: Date
  magnitute: number
  lat: number
  long: number
  utm_x: number
  utm_y: number
  depth: number | null
  phase: number | null
  center_th: string | null
  center_en: string | null
  severity_level: number
  created_at: Date
  updated_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Fault_data
 * const fault_data = await prisma.fault_data.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Fault_data
   * const fault_data = await prisma.fault_data.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.fault_data`: Exposes CRUD operations for the **fault_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fault_data
    * const fault_data = await prisma.fault_data.findMany()
    * ```
    */
  get fault_data(): Prisma.fault_dataDelegate<GlobalReject>;

  /**
   * `prisma.faults`: Exposes CRUD operations for the **faults** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faults
    * const faults = await prisma.faults.findMany()
    * ```
    */
  get faults(): Prisma.faultsDelegate<GlobalReject>;

  /**
   * `prisma.raw_data`: Exposes CRUD operations for the **raw_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Raw_data
    * const raw_data = await prisma.raw_data.findMany()
    * ```
    */
  get raw_data(): Prisma.raw_dataDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    fault_data: 'fault_data',
    faults: 'faults',
    raw_data: 'raw_data'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model fault_data
   */


  export type AggregateFault_data = {
    _count: Fault_dataCountAggregateOutputType | null
    _avg: Fault_dataAvgAggregateOutputType | null
    _sum: Fault_dataSumAggregateOutputType | null
    _min: Fault_dataMinAggregateOutputType | null
    _max: Fault_dataMaxAggregateOutputType | null
  }

  export type Fault_dataAvgAggregateOutputType = {
    id: number | null
    magnitute: number | null
    fault_id: number | null
  }

  export type Fault_dataSumAggregateOutputType = {
    id: number | null
    magnitute: number | null
    fault_id: number | null
  }

  export type Fault_dataMinAggregateOutputType = {
    id: number | null
    magnitute: number | null
    date_utc: Date | null
    fault_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Fault_dataMaxAggregateOutputType = {
    id: number | null
    magnitute: number | null
    date_utc: Date | null
    fault_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Fault_dataCountAggregateOutputType = {
    id: number
    magnitute: number
    date_utc: number
    fault_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Fault_dataAvgAggregateInputType = {
    id?: true
    magnitute?: true
    fault_id?: true
  }

  export type Fault_dataSumAggregateInputType = {
    id?: true
    magnitute?: true
    fault_id?: true
  }

  export type Fault_dataMinAggregateInputType = {
    id?: true
    magnitute?: true
    date_utc?: true
    fault_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Fault_dataMaxAggregateInputType = {
    id?: true
    magnitute?: true
    date_utc?: true
    fault_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Fault_dataCountAggregateInputType = {
    id?: true
    magnitute?: true
    date_utc?: true
    fault_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Fault_dataAggregateArgs = {
    /**
     * Filter which fault_data to aggregate.
     */
    where?: fault_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fault_data to fetch.
     */
    orderBy?: Enumerable<fault_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: fault_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fault_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fault_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned fault_data
    **/
    _count?: true | Fault_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Fault_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Fault_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Fault_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Fault_dataMaxAggregateInputType
  }

  export type GetFault_dataAggregateType<T extends Fault_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateFault_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFault_data[P]>
      : GetScalarType<T[P], AggregateFault_data[P]>
  }




  export type Fault_dataGroupByArgs = {
    where?: fault_dataWhereInput
    orderBy?: Enumerable<fault_dataOrderByWithAggregationInput>
    by: Fault_dataScalarFieldEnum[]
    having?: fault_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Fault_dataCountAggregateInputType | true
    _avg?: Fault_dataAvgAggregateInputType
    _sum?: Fault_dataSumAggregateInputType
    _min?: Fault_dataMinAggregateInputType
    _max?: Fault_dataMaxAggregateInputType
  }


  export type Fault_dataGroupByOutputType = {
    id: number
    magnitute: number
    date_utc: Date
    fault_id: number | null
    created_at: Date
    updated_at: Date
    _count: Fault_dataCountAggregateOutputType | null
    _avg: Fault_dataAvgAggregateOutputType | null
    _sum: Fault_dataSumAggregateOutputType | null
    _min: Fault_dataMinAggregateOutputType | null
    _max: Fault_dataMaxAggregateOutputType | null
  }

  type GetFault_dataGroupByPayload<T extends Fault_dataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Fault_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Fault_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Fault_dataGroupByOutputType[P]>
            : GetScalarType<T[P], Fault_dataGroupByOutputType[P]>
        }
      >
    >


  export type fault_dataSelect = {
    id?: boolean
    magnitute?: boolean
    date_utc?: boolean
    fault_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type fault_dataGetPayload<S extends boolean | null | undefined | fault_dataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? fault_data :
    S extends undefined ? never :
    S extends { include: any } & (fault_dataArgs | fault_dataFindManyArgs)
    ? fault_data 
    : S extends { select: any } & (fault_dataArgs | fault_dataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof fault_data ? fault_data[P] : never
  } 
      : fault_data


  type fault_dataCountArgs = 
    Omit<fault_dataFindManyArgs, 'select' | 'include'> & {
      select?: Fault_dataCountAggregateInputType | true
    }

  export interface fault_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Fault_data that matches the filter.
     * @param {fault_dataFindUniqueArgs} args - Arguments to find a Fault_data
     * @example
     * // Get one Fault_data
     * const fault_data = await prisma.fault_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends fault_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, fault_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'fault_data'> extends True ? Prisma__fault_dataClient<fault_dataGetPayload<T>> : Prisma__fault_dataClient<fault_dataGetPayload<T> | null, null>

    /**
     * Find one Fault_data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {fault_dataFindUniqueOrThrowArgs} args - Arguments to find a Fault_data
     * @example
     * // Get one Fault_data
     * const fault_data = await prisma.fault_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends fault_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, fault_dataFindUniqueOrThrowArgs>
    ): Prisma__fault_dataClient<fault_dataGetPayload<T>>

    /**
     * Find the first Fault_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fault_dataFindFirstArgs} args - Arguments to find a Fault_data
     * @example
     * // Get one Fault_data
     * const fault_data = await prisma.fault_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends fault_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, fault_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'fault_data'> extends True ? Prisma__fault_dataClient<fault_dataGetPayload<T>> : Prisma__fault_dataClient<fault_dataGetPayload<T> | null, null>

    /**
     * Find the first Fault_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fault_dataFindFirstOrThrowArgs} args - Arguments to find a Fault_data
     * @example
     * // Get one Fault_data
     * const fault_data = await prisma.fault_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends fault_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, fault_dataFindFirstOrThrowArgs>
    ): Prisma__fault_dataClient<fault_dataGetPayload<T>>

    /**
     * Find zero or more Fault_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fault_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fault_data
     * const fault_data = await prisma.fault_data.findMany()
     * 
     * // Get first 10 Fault_data
     * const fault_data = await prisma.fault_data.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fault_dataWithIdOnly = await prisma.fault_data.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends fault_dataFindManyArgs>(
      args?: SelectSubset<T, fault_dataFindManyArgs>
    ): Prisma.PrismaPromise<Array<fault_dataGetPayload<T>>>

    /**
     * Create a Fault_data.
     * @param {fault_dataCreateArgs} args - Arguments to create a Fault_data.
     * @example
     * // Create one Fault_data
     * const Fault_data = await prisma.fault_data.create({
     *   data: {
     *     // ... data to create a Fault_data
     *   }
     * })
     * 
    **/
    create<T extends fault_dataCreateArgs>(
      args: SelectSubset<T, fault_dataCreateArgs>
    ): Prisma__fault_dataClient<fault_dataGetPayload<T>>

    /**
     * Create many Fault_data.
     *     @param {fault_dataCreateManyArgs} args - Arguments to create many Fault_data.
     *     @example
     *     // Create many Fault_data
     *     const fault_data = await prisma.fault_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends fault_dataCreateManyArgs>(
      args?: SelectSubset<T, fault_dataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fault_data.
     * @param {fault_dataDeleteArgs} args - Arguments to delete one Fault_data.
     * @example
     * // Delete one Fault_data
     * const Fault_data = await prisma.fault_data.delete({
     *   where: {
     *     // ... filter to delete one Fault_data
     *   }
     * })
     * 
    **/
    delete<T extends fault_dataDeleteArgs>(
      args: SelectSubset<T, fault_dataDeleteArgs>
    ): Prisma__fault_dataClient<fault_dataGetPayload<T>>

    /**
     * Update one Fault_data.
     * @param {fault_dataUpdateArgs} args - Arguments to update one Fault_data.
     * @example
     * // Update one Fault_data
     * const fault_data = await prisma.fault_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends fault_dataUpdateArgs>(
      args: SelectSubset<T, fault_dataUpdateArgs>
    ): Prisma__fault_dataClient<fault_dataGetPayload<T>>

    /**
     * Delete zero or more Fault_data.
     * @param {fault_dataDeleteManyArgs} args - Arguments to filter Fault_data to delete.
     * @example
     * // Delete a few Fault_data
     * const { count } = await prisma.fault_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends fault_dataDeleteManyArgs>(
      args?: SelectSubset<T, fault_dataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fault_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fault_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fault_data
     * const fault_data = await prisma.fault_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends fault_dataUpdateManyArgs>(
      args: SelectSubset<T, fault_dataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fault_data.
     * @param {fault_dataUpsertArgs} args - Arguments to update or create a Fault_data.
     * @example
     * // Update or create a Fault_data
     * const fault_data = await prisma.fault_data.upsert({
     *   create: {
     *     // ... data to create a Fault_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fault_data we want to update
     *   }
     * })
    **/
    upsert<T extends fault_dataUpsertArgs>(
      args: SelectSubset<T, fault_dataUpsertArgs>
    ): Prisma__fault_dataClient<fault_dataGetPayload<T>>

    /**
     * Count the number of Fault_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fault_dataCountArgs} args - Arguments to filter Fault_data to count.
     * @example
     * // Count the number of Fault_data
     * const count = await prisma.fault_data.count({
     *   where: {
     *     // ... the filter for the Fault_data we want to count
     *   }
     * })
    **/
    count<T extends fault_dataCountArgs>(
      args?: Subset<T, fault_dataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Fault_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fault_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fault_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Fault_dataAggregateArgs>(args: Subset<T, Fault_dataAggregateArgs>): Prisma.PrismaPromise<GetFault_dataAggregateType<T>>

    /**
     * Group by Fault_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fault_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Fault_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Fault_dataGroupByArgs['orderBy'] }
        : { orderBy?: Fault_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Fault_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFault_dataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for fault_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__fault_dataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * fault_data base type for findUnique actions
   */
  export type fault_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * Filter, which fault_data to fetch.
     */
    where: fault_dataWhereUniqueInput
  }

  /**
   * fault_data findUnique
   */
  export interface fault_dataFindUniqueArgs extends fault_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * fault_data findUniqueOrThrow
   */
  export type fault_dataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * Filter, which fault_data to fetch.
     */
    where: fault_dataWhereUniqueInput
  }


  /**
   * fault_data base type for findFirst actions
   */
  export type fault_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * Filter, which fault_data to fetch.
     */
    where?: fault_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fault_data to fetch.
     */
    orderBy?: Enumerable<fault_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fault_data.
     */
    cursor?: fault_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fault_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fault_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fault_data.
     */
    distinct?: Enumerable<Fault_dataScalarFieldEnum>
  }

  /**
   * fault_data findFirst
   */
  export interface fault_dataFindFirstArgs extends fault_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * fault_data findFirstOrThrow
   */
  export type fault_dataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * Filter, which fault_data to fetch.
     */
    where?: fault_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fault_data to fetch.
     */
    orderBy?: Enumerable<fault_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fault_data.
     */
    cursor?: fault_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fault_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fault_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fault_data.
     */
    distinct?: Enumerable<Fault_dataScalarFieldEnum>
  }


  /**
   * fault_data findMany
   */
  export type fault_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * Filter, which fault_data to fetch.
     */
    where?: fault_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fault_data to fetch.
     */
    orderBy?: Enumerable<fault_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing fault_data.
     */
    cursor?: fault_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fault_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fault_data.
     */
    skip?: number
    distinct?: Enumerable<Fault_dataScalarFieldEnum>
  }


  /**
   * fault_data create
   */
  export type fault_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * The data needed to create a fault_data.
     */
    data: XOR<fault_dataCreateInput, fault_dataUncheckedCreateInput>
  }


  /**
   * fault_data createMany
   */
  export type fault_dataCreateManyArgs = {
    /**
     * The data used to create many fault_data.
     */
    data: Enumerable<fault_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * fault_data update
   */
  export type fault_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * The data needed to update a fault_data.
     */
    data: XOR<fault_dataUpdateInput, fault_dataUncheckedUpdateInput>
    /**
     * Choose, which fault_data to update.
     */
    where: fault_dataWhereUniqueInput
  }


  /**
   * fault_data updateMany
   */
  export type fault_dataUpdateManyArgs = {
    /**
     * The data used to update fault_data.
     */
    data: XOR<fault_dataUpdateManyMutationInput, fault_dataUncheckedUpdateManyInput>
    /**
     * Filter which fault_data to update
     */
    where?: fault_dataWhereInput
  }


  /**
   * fault_data upsert
   */
  export type fault_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * The filter to search for the fault_data to update in case it exists.
     */
    where: fault_dataWhereUniqueInput
    /**
     * In case the fault_data found by the `where` argument doesn't exist, create a new fault_data with this data.
     */
    create: XOR<fault_dataCreateInput, fault_dataUncheckedCreateInput>
    /**
     * In case the fault_data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<fault_dataUpdateInput, fault_dataUncheckedUpdateInput>
  }


  /**
   * fault_data delete
   */
  export type fault_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
    /**
     * Filter which fault_data to delete.
     */
    where: fault_dataWhereUniqueInput
  }


  /**
   * fault_data deleteMany
   */
  export type fault_dataDeleteManyArgs = {
    /**
     * Filter which fault_data to delete
     */
    where?: fault_dataWhereInput
  }


  /**
   * fault_data without action
   */
  export type fault_dataArgs = {
    /**
     * Select specific fields to fetch from the fault_data
     */
    select?: fault_dataSelect | null
  }



  /**
   * Model faults
   */


  export type AggregateFaults = {
    _count: FaultsCountAggregateOutputType | null
    _avg: FaultsAvgAggregateOutputType | null
    _sum: FaultsSumAggregateOutputType | null
    _min: FaultsMinAggregateOutputType | null
    _max: FaultsMaxAggregateOutputType | null
  }

  export type FaultsAvgAggregateOutputType = {
    fault_id: number | null
  }

  export type FaultsSumAggregateOutputType = {
    fault_id: number | null
  }

  export type FaultsMinAggregateOutputType = {
    fault_id: number | null
    fault_name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type FaultsMaxAggregateOutputType = {
    fault_id: number | null
    fault_name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type FaultsCountAggregateOutputType = {
    fault_id: number
    fault_name: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type FaultsAvgAggregateInputType = {
    fault_id?: true
  }

  export type FaultsSumAggregateInputType = {
    fault_id?: true
  }

  export type FaultsMinAggregateInputType = {
    fault_id?: true
    fault_name?: true
    created_at?: true
    updated_at?: true
  }

  export type FaultsMaxAggregateInputType = {
    fault_id?: true
    fault_name?: true
    created_at?: true
    updated_at?: true
  }

  export type FaultsCountAggregateInputType = {
    fault_id?: true
    fault_name?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type FaultsAggregateArgs = {
    /**
     * Filter which faults to aggregate.
     */
    where?: faultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faults to fetch.
     */
    orderBy?: Enumerable<faultsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: faultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned faults
    **/
    _count?: true | FaultsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaultsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaultsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaultsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaultsMaxAggregateInputType
  }

  export type GetFaultsAggregateType<T extends FaultsAggregateArgs> = {
        [P in keyof T & keyof AggregateFaults]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaults[P]>
      : GetScalarType<T[P], AggregateFaults[P]>
  }




  export type FaultsGroupByArgs = {
    where?: faultsWhereInput
    orderBy?: Enumerable<faultsOrderByWithAggregationInput>
    by: FaultsScalarFieldEnum[]
    having?: faultsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaultsCountAggregateInputType | true
    _avg?: FaultsAvgAggregateInputType
    _sum?: FaultsSumAggregateInputType
    _min?: FaultsMinAggregateInputType
    _max?: FaultsMaxAggregateInputType
  }


  export type FaultsGroupByOutputType = {
    fault_id: number
    fault_name: string
    created_at: Date
    updated_at: Date
    _count: FaultsCountAggregateOutputType | null
    _avg: FaultsAvgAggregateOutputType | null
    _sum: FaultsSumAggregateOutputType | null
    _min: FaultsMinAggregateOutputType | null
    _max: FaultsMaxAggregateOutputType | null
  }

  type GetFaultsGroupByPayload<T extends FaultsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FaultsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaultsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaultsGroupByOutputType[P]>
            : GetScalarType<T[P], FaultsGroupByOutputType[P]>
        }
      >
    >


  export type faultsSelect = {
    fault_id?: boolean
    fault_name?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type faultsGetPayload<S extends boolean | null | undefined | faultsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? faults :
    S extends undefined ? never :
    S extends { include: any } & (faultsArgs | faultsFindManyArgs)
    ? faults 
    : S extends { select: any } & (faultsArgs | faultsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof faults ? faults[P] : never
  } 
      : faults


  type faultsCountArgs = 
    Omit<faultsFindManyArgs, 'select' | 'include'> & {
      select?: FaultsCountAggregateInputType | true
    }

  export interface faultsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Faults that matches the filter.
     * @param {faultsFindUniqueArgs} args - Arguments to find a Faults
     * @example
     * // Get one Faults
     * const faults = await prisma.faults.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends faultsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, faultsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'faults'> extends True ? Prisma__faultsClient<faultsGetPayload<T>> : Prisma__faultsClient<faultsGetPayload<T> | null, null>

    /**
     * Find one Faults that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {faultsFindUniqueOrThrowArgs} args - Arguments to find a Faults
     * @example
     * // Get one Faults
     * const faults = await prisma.faults.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends faultsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, faultsFindUniqueOrThrowArgs>
    ): Prisma__faultsClient<faultsGetPayload<T>>

    /**
     * Find the first Faults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faultsFindFirstArgs} args - Arguments to find a Faults
     * @example
     * // Get one Faults
     * const faults = await prisma.faults.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends faultsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, faultsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'faults'> extends True ? Prisma__faultsClient<faultsGetPayload<T>> : Prisma__faultsClient<faultsGetPayload<T> | null, null>

    /**
     * Find the first Faults that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faultsFindFirstOrThrowArgs} args - Arguments to find a Faults
     * @example
     * // Get one Faults
     * const faults = await prisma.faults.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends faultsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, faultsFindFirstOrThrowArgs>
    ): Prisma__faultsClient<faultsGetPayload<T>>

    /**
     * Find zero or more Faults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faultsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faults
     * const faults = await prisma.faults.findMany()
     * 
     * // Get first 10 Faults
     * const faults = await prisma.faults.findMany({ take: 10 })
     * 
     * // Only select the `fault_id`
     * const faultsWithFault_idOnly = await prisma.faults.findMany({ select: { fault_id: true } })
     * 
    **/
    findMany<T extends faultsFindManyArgs>(
      args?: SelectSubset<T, faultsFindManyArgs>
    ): Prisma.PrismaPromise<Array<faultsGetPayload<T>>>

    /**
     * Create a Faults.
     * @param {faultsCreateArgs} args - Arguments to create a Faults.
     * @example
     * // Create one Faults
     * const Faults = await prisma.faults.create({
     *   data: {
     *     // ... data to create a Faults
     *   }
     * })
     * 
    **/
    create<T extends faultsCreateArgs>(
      args: SelectSubset<T, faultsCreateArgs>
    ): Prisma__faultsClient<faultsGetPayload<T>>

    /**
     * Create many Faults.
     *     @param {faultsCreateManyArgs} args - Arguments to create many Faults.
     *     @example
     *     // Create many Faults
     *     const faults = await prisma.faults.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends faultsCreateManyArgs>(
      args?: SelectSubset<T, faultsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Faults.
     * @param {faultsDeleteArgs} args - Arguments to delete one Faults.
     * @example
     * // Delete one Faults
     * const Faults = await prisma.faults.delete({
     *   where: {
     *     // ... filter to delete one Faults
     *   }
     * })
     * 
    **/
    delete<T extends faultsDeleteArgs>(
      args: SelectSubset<T, faultsDeleteArgs>
    ): Prisma__faultsClient<faultsGetPayload<T>>

    /**
     * Update one Faults.
     * @param {faultsUpdateArgs} args - Arguments to update one Faults.
     * @example
     * // Update one Faults
     * const faults = await prisma.faults.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends faultsUpdateArgs>(
      args: SelectSubset<T, faultsUpdateArgs>
    ): Prisma__faultsClient<faultsGetPayload<T>>

    /**
     * Delete zero or more Faults.
     * @param {faultsDeleteManyArgs} args - Arguments to filter Faults to delete.
     * @example
     * // Delete a few Faults
     * const { count } = await prisma.faults.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends faultsDeleteManyArgs>(
      args?: SelectSubset<T, faultsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faultsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faults
     * const faults = await prisma.faults.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends faultsUpdateManyArgs>(
      args: SelectSubset<T, faultsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Faults.
     * @param {faultsUpsertArgs} args - Arguments to update or create a Faults.
     * @example
     * // Update or create a Faults
     * const faults = await prisma.faults.upsert({
     *   create: {
     *     // ... data to create a Faults
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faults we want to update
     *   }
     * })
    **/
    upsert<T extends faultsUpsertArgs>(
      args: SelectSubset<T, faultsUpsertArgs>
    ): Prisma__faultsClient<faultsGetPayload<T>>

    /**
     * Count the number of Faults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faultsCountArgs} args - Arguments to filter Faults to count.
     * @example
     * // Count the number of Faults
     * const count = await prisma.faults.count({
     *   where: {
     *     // ... the filter for the Faults we want to count
     *   }
     * })
    **/
    count<T extends faultsCountArgs>(
      args?: Subset<T, faultsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaultsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaultsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaultsAggregateArgs>(args: Subset<T, FaultsAggregateArgs>): Prisma.PrismaPromise<GetFaultsAggregateType<T>>

    /**
     * Group by Faults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaultsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaultsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaultsGroupByArgs['orderBy'] }
        : { orderBy?: FaultsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaultsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaultsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for faults.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__faultsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * faults base type for findUnique actions
   */
  export type faultsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * Filter, which faults to fetch.
     */
    where: faultsWhereUniqueInput
  }

  /**
   * faults findUnique
   */
  export interface faultsFindUniqueArgs extends faultsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * faults findUniqueOrThrow
   */
  export type faultsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * Filter, which faults to fetch.
     */
    where: faultsWhereUniqueInput
  }


  /**
   * faults base type for findFirst actions
   */
  export type faultsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * Filter, which faults to fetch.
     */
    where?: faultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faults to fetch.
     */
    orderBy?: Enumerable<faultsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for faults.
     */
    cursor?: faultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of faults.
     */
    distinct?: Enumerable<FaultsScalarFieldEnum>
  }

  /**
   * faults findFirst
   */
  export interface faultsFindFirstArgs extends faultsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * faults findFirstOrThrow
   */
  export type faultsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * Filter, which faults to fetch.
     */
    where?: faultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faults to fetch.
     */
    orderBy?: Enumerable<faultsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for faults.
     */
    cursor?: faultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of faults.
     */
    distinct?: Enumerable<FaultsScalarFieldEnum>
  }


  /**
   * faults findMany
   */
  export type faultsFindManyArgs = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * Filter, which faults to fetch.
     */
    where?: faultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faults to fetch.
     */
    orderBy?: Enumerable<faultsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing faults.
     */
    cursor?: faultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faults.
     */
    skip?: number
    distinct?: Enumerable<FaultsScalarFieldEnum>
  }


  /**
   * faults create
   */
  export type faultsCreateArgs = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * The data needed to create a faults.
     */
    data: XOR<faultsCreateInput, faultsUncheckedCreateInput>
  }


  /**
   * faults createMany
   */
  export type faultsCreateManyArgs = {
    /**
     * The data used to create many faults.
     */
    data: Enumerable<faultsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * faults update
   */
  export type faultsUpdateArgs = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * The data needed to update a faults.
     */
    data: XOR<faultsUpdateInput, faultsUncheckedUpdateInput>
    /**
     * Choose, which faults to update.
     */
    where: faultsWhereUniqueInput
  }


  /**
   * faults updateMany
   */
  export type faultsUpdateManyArgs = {
    /**
     * The data used to update faults.
     */
    data: XOR<faultsUpdateManyMutationInput, faultsUncheckedUpdateManyInput>
    /**
     * Filter which faults to update
     */
    where?: faultsWhereInput
  }


  /**
   * faults upsert
   */
  export type faultsUpsertArgs = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * The filter to search for the faults to update in case it exists.
     */
    where: faultsWhereUniqueInput
    /**
     * In case the faults found by the `where` argument doesn't exist, create a new faults with this data.
     */
    create: XOR<faultsCreateInput, faultsUncheckedCreateInput>
    /**
     * In case the faults was found with the provided `where` argument, update it with this data.
     */
    update: XOR<faultsUpdateInput, faultsUncheckedUpdateInput>
  }


  /**
   * faults delete
   */
  export type faultsDeleteArgs = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
    /**
     * Filter which faults to delete.
     */
    where: faultsWhereUniqueInput
  }


  /**
   * faults deleteMany
   */
  export type faultsDeleteManyArgs = {
    /**
     * Filter which faults to delete
     */
    where?: faultsWhereInput
  }


  /**
   * faults without action
   */
  export type faultsArgs = {
    /**
     * Select specific fields to fetch from the faults
     */
    select?: faultsSelect | null
  }



  /**
   * Model raw_data
   */


  export type AggregateRaw_data = {
    _count: Raw_dataCountAggregateOutputType | null
    _avg: Raw_dataAvgAggregateOutputType | null
    _sum: Raw_dataSumAggregateOutputType | null
    _min: Raw_dataMinAggregateOutputType | null
    _max: Raw_dataMaxAggregateOutputType | null
  }

  export type Raw_dataAvgAggregateOutputType = {
    raw_id: number | null
    magnitute: number | null
    lat: number | null
    long: number | null
    utm_x: number | null
    utm_y: number | null
    depth: number | null
    phase: number | null
    severity_level: number | null
  }

  export type Raw_dataSumAggregateOutputType = {
    raw_id: number | null
    magnitute: number | null
    lat: number | null
    long: number | null
    utm_x: number | null
    utm_y: number | null
    depth: number | null
    phase: number | null
    severity_level: number | null
  }

  export type Raw_dataMinAggregateOutputType = {
    raw_id: number | null
    date_utc: Date | null
    magnitute: number | null
    lat: number | null
    long: number | null
    utm_x: number | null
    utm_y: number | null
    depth: number | null
    phase: number | null
    center_th: string | null
    center_en: string | null
    severity_level: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Raw_dataMaxAggregateOutputType = {
    raw_id: number | null
    date_utc: Date | null
    magnitute: number | null
    lat: number | null
    long: number | null
    utm_x: number | null
    utm_y: number | null
    depth: number | null
    phase: number | null
    center_th: string | null
    center_en: string | null
    severity_level: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Raw_dataCountAggregateOutputType = {
    raw_id: number
    date_utc: number
    magnitute: number
    lat: number
    long: number
    utm_x: number
    utm_y: number
    depth: number
    phase: number
    center_th: number
    center_en: number
    severity_level: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Raw_dataAvgAggregateInputType = {
    raw_id?: true
    magnitute?: true
    lat?: true
    long?: true
    utm_x?: true
    utm_y?: true
    depth?: true
    phase?: true
    severity_level?: true
  }

  export type Raw_dataSumAggregateInputType = {
    raw_id?: true
    magnitute?: true
    lat?: true
    long?: true
    utm_x?: true
    utm_y?: true
    depth?: true
    phase?: true
    severity_level?: true
  }

  export type Raw_dataMinAggregateInputType = {
    raw_id?: true
    date_utc?: true
    magnitute?: true
    lat?: true
    long?: true
    utm_x?: true
    utm_y?: true
    depth?: true
    phase?: true
    center_th?: true
    center_en?: true
    severity_level?: true
    created_at?: true
    updated_at?: true
  }

  export type Raw_dataMaxAggregateInputType = {
    raw_id?: true
    date_utc?: true
    magnitute?: true
    lat?: true
    long?: true
    utm_x?: true
    utm_y?: true
    depth?: true
    phase?: true
    center_th?: true
    center_en?: true
    severity_level?: true
    created_at?: true
    updated_at?: true
  }

  export type Raw_dataCountAggregateInputType = {
    raw_id?: true
    date_utc?: true
    magnitute?: true
    lat?: true
    long?: true
    utm_x?: true
    utm_y?: true
    depth?: true
    phase?: true
    center_th?: true
    center_en?: true
    severity_level?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Raw_dataAggregateArgs = {
    /**
     * Filter which raw_data to aggregate.
     */
    where?: raw_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_data to fetch.
     */
    orderBy?: Enumerable<raw_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: raw_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned raw_data
    **/
    _count?: true | Raw_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Raw_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Raw_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Raw_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Raw_dataMaxAggregateInputType
  }

  export type GetRaw_dataAggregateType<T extends Raw_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateRaw_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRaw_data[P]>
      : GetScalarType<T[P], AggregateRaw_data[P]>
  }




  export type Raw_dataGroupByArgs = {
    where?: raw_dataWhereInput
    orderBy?: Enumerable<raw_dataOrderByWithAggregationInput>
    by: Raw_dataScalarFieldEnum[]
    having?: raw_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Raw_dataCountAggregateInputType | true
    _avg?: Raw_dataAvgAggregateInputType
    _sum?: Raw_dataSumAggregateInputType
    _min?: Raw_dataMinAggregateInputType
    _max?: Raw_dataMaxAggregateInputType
  }


  export type Raw_dataGroupByOutputType = {
    raw_id: number
    date_utc: Date
    magnitute: number
    lat: number
    long: number
    utm_x: number
    utm_y: number
    depth: number | null
    phase: number | null
    center_th: string | null
    center_en: string | null
    severity_level: number
    created_at: Date
    updated_at: Date
    _count: Raw_dataCountAggregateOutputType | null
    _avg: Raw_dataAvgAggregateOutputType | null
    _sum: Raw_dataSumAggregateOutputType | null
    _min: Raw_dataMinAggregateOutputType | null
    _max: Raw_dataMaxAggregateOutputType | null
  }

  type GetRaw_dataGroupByPayload<T extends Raw_dataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Raw_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Raw_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Raw_dataGroupByOutputType[P]>
            : GetScalarType<T[P], Raw_dataGroupByOutputType[P]>
        }
      >
    >


  export type raw_dataSelect = {
    raw_id?: boolean
    date_utc?: boolean
    magnitute?: boolean
    lat?: boolean
    long?: boolean
    utm_x?: boolean
    utm_y?: boolean
    depth?: boolean
    phase?: boolean
    center_th?: boolean
    center_en?: boolean
    severity_level?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type raw_dataGetPayload<S extends boolean | null | undefined | raw_dataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? raw_data :
    S extends undefined ? never :
    S extends { include: any } & (raw_dataArgs | raw_dataFindManyArgs)
    ? raw_data 
    : S extends { select: any } & (raw_dataArgs | raw_dataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof raw_data ? raw_data[P] : never
  } 
      : raw_data


  type raw_dataCountArgs = 
    Omit<raw_dataFindManyArgs, 'select' | 'include'> & {
      select?: Raw_dataCountAggregateInputType | true
    }

  export interface raw_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Raw_data that matches the filter.
     * @param {raw_dataFindUniqueArgs} args - Arguments to find a Raw_data
     * @example
     * // Get one Raw_data
     * const raw_data = await prisma.raw_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends raw_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, raw_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'raw_data'> extends True ? Prisma__raw_dataClient<raw_dataGetPayload<T>> : Prisma__raw_dataClient<raw_dataGetPayload<T> | null, null>

    /**
     * Find one Raw_data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {raw_dataFindUniqueOrThrowArgs} args - Arguments to find a Raw_data
     * @example
     * // Get one Raw_data
     * const raw_data = await prisma.raw_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends raw_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, raw_dataFindUniqueOrThrowArgs>
    ): Prisma__raw_dataClient<raw_dataGetPayload<T>>

    /**
     * Find the first Raw_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_dataFindFirstArgs} args - Arguments to find a Raw_data
     * @example
     * // Get one Raw_data
     * const raw_data = await prisma.raw_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends raw_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, raw_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'raw_data'> extends True ? Prisma__raw_dataClient<raw_dataGetPayload<T>> : Prisma__raw_dataClient<raw_dataGetPayload<T> | null, null>

    /**
     * Find the first Raw_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_dataFindFirstOrThrowArgs} args - Arguments to find a Raw_data
     * @example
     * // Get one Raw_data
     * const raw_data = await prisma.raw_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends raw_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, raw_dataFindFirstOrThrowArgs>
    ): Prisma__raw_dataClient<raw_dataGetPayload<T>>

    /**
     * Find zero or more Raw_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Raw_data
     * const raw_data = await prisma.raw_data.findMany()
     * 
     * // Get first 10 Raw_data
     * const raw_data = await prisma.raw_data.findMany({ take: 10 })
     * 
     * // Only select the `raw_id`
     * const raw_dataWithRaw_idOnly = await prisma.raw_data.findMany({ select: { raw_id: true } })
     * 
    **/
    findMany<T extends raw_dataFindManyArgs>(
      args?: SelectSubset<T, raw_dataFindManyArgs>
    ): Prisma.PrismaPromise<Array<raw_dataGetPayload<T>>>

    /**
     * Create a Raw_data.
     * @param {raw_dataCreateArgs} args - Arguments to create a Raw_data.
     * @example
     * // Create one Raw_data
     * const Raw_data = await prisma.raw_data.create({
     *   data: {
     *     // ... data to create a Raw_data
     *   }
     * })
     * 
    **/
    create<T extends raw_dataCreateArgs>(
      args: SelectSubset<T, raw_dataCreateArgs>
    ): Prisma__raw_dataClient<raw_dataGetPayload<T>>

    /**
     * Create many Raw_data.
     *     @param {raw_dataCreateManyArgs} args - Arguments to create many Raw_data.
     *     @example
     *     // Create many Raw_data
     *     const raw_data = await prisma.raw_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends raw_dataCreateManyArgs>(
      args?: SelectSubset<T, raw_dataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Raw_data.
     * @param {raw_dataDeleteArgs} args - Arguments to delete one Raw_data.
     * @example
     * // Delete one Raw_data
     * const Raw_data = await prisma.raw_data.delete({
     *   where: {
     *     // ... filter to delete one Raw_data
     *   }
     * })
     * 
    **/
    delete<T extends raw_dataDeleteArgs>(
      args: SelectSubset<T, raw_dataDeleteArgs>
    ): Prisma__raw_dataClient<raw_dataGetPayload<T>>

    /**
     * Update one Raw_data.
     * @param {raw_dataUpdateArgs} args - Arguments to update one Raw_data.
     * @example
     * // Update one Raw_data
     * const raw_data = await prisma.raw_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends raw_dataUpdateArgs>(
      args: SelectSubset<T, raw_dataUpdateArgs>
    ): Prisma__raw_dataClient<raw_dataGetPayload<T>>

    /**
     * Delete zero or more Raw_data.
     * @param {raw_dataDeleteManyArgs} args - Arguments to filter Raw_data to delete.
     * @example
     * // Delete a few Raw_data
     * const { count } = await prisma.raw_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends raw_dataDeleteManyArgs>(
      args?: SelectSubset<T, raw_dataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Raw_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Raw_data
     * const raw_data = await prisma.raw_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends raw_dataUpdateManyArgs>(
      args: SelectSubset<T, raw_dataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Raw_data.
     * @param {raw_dataUpsertArgs} args - Arguments to update or create a Raw_data.
     * @example
     * // Update or create a Raw_data
     * const raw_data = await prisma.raw_data.upsert({
     *   create: {
     *     // ... data to create a Raw_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Raw_data we want to update
     *   }
     * })
    **/
    upsert<T extends raw_dataUpsertArgs>(
      args: SelectSubset<T, raw_dataUpsertArgs>
    ): Prisma__raw_dataClient<raw_dataGetPayload<T>>

    /**
     * Count the number of Raw_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_dataCountArgs} args - Arguments to filter Raw_data to count.
     * @example
     * // Count the number of Raw_data
     * const count = await prisma.raw_data.count({
     *   where: {
     *     // ... the filter for the Raw_data we want to count
     *   }
     * })
    **/
    count<T extends raw_dataCountArgs>(
      args?: Subset<T, raw_dataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Raw_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Raw_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Raw_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Raw_dataAggregateArgs>(args: Subset<T, Raw_dataAggregateArgs>): Prisma.PrismaPromise<GetRaw_dataAggregateType<T>>

    /**
     * Group by Raw_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Raw_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Raw_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Raw_dataGroupByArgs['orderBy'] }
        : { orderBy?: Raw_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Raw_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaw_dataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for raw_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__raw_dataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * raw_data base type for findUnique actions
   */
  export type raw_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * Filter, which raw_data to fetch.
     */
    where: raw_dataWhereUniqueInput
  }

  /**
   * raw_data findUnique
   */
  export interface raw_dataFindUniqueArgs extends raw_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * raw_data findUniqueOrThrow
   */
  export type raw_dataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * Filter, which raw_data to fetch.
     */
    where: raw_dataWhereUniqueInput
  }


  /**
   * raw_data base type for findFirst actions
   */
  export type raw_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * Filter, which raw_data to fetch.
     */
    where?: raw_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_data to fetch.
     */
    orderBy?: Enumerable<raw_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for raw_data.
     */
    cursor?: raw_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of raw_data.
     */
    distinct?: Enumerable<Raw_dataScalarFieldEnum>
  }

  /**
   * raw_data findFirst
   */
  export interface raw_dataFindFirstArgs extends raw_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * raw_data findFirstOrThrow
   */
  export type raw_dataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * Filter, which raw_data to fetch.
     */
    where?: raw_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_data to fetch.
     */
    orderBy?: Enumerable<raw_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for raw_data.
     */
    cursor?: raw_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of raw_data.
     */
    distinct?: Enumerable<Raw_dataScalarFieldEnum>
  }


  /**
   * raw_data findMany
   */
  export type raw_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * Filter, which raw_data to fetch.
     */
    where?: raw_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_data to fetch.
     */
    orderBy?: Enumerable<raw_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing raw_data.
     */
    cursor?: raw_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_data.
     */
    skip?: number
    distinct?: Enumerable<Raw_dataScalarFieldEnum>
  }


  /**
   * raw_data create
   */
  export type raw_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * The data needed to create a raw_data.
     */
    data: XOR<raw_dataCreateInput, raw_dataUncheckedCreateInput>
  }


  /**
   * raw_data createMany
   */
  export type raw_dataCreateManyArgs = {
    /**
     * The data used to create many raw_data.
     */
    data: Enumerable<raw_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * raw_data update
   */
  export type raw_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * The data needed to update a raw_data.
     */
    data: XOR<raw_dataUpdateInput, raw_dataUncheckedUpdateInput>
    /**
     * Choose, which raw_data to update.
     */
    where: raw_dataWhereUniqueInput
  }


  /**
   * raw_data updateMany
   */
  export type raw_dataUpdateManyArgs = {
    /**
     * The data used to update raw_data.
     */
    data: XOR<raw_dataUpdateManyMutationInput, raw_dataUncheckedUpdateManyInput>
    /**
     * Filter which raw_data to update
     */
    where?: raw_dataWhereInput
  }


  /**
   * raw_data upsert
   */
  export type raw_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * The filter to search for the raw_data to update in case it exists.
     */
    where: raw_dataWhereUniqueInput
    /**
     * In case the raw_data found by the `where` argument doesn't exist, create a new raw_data with this data.
     */
    create: XOR<raw_dataCreateInput, raw_dataUncheckedCreateInput>
    /**
     * In case the raw_data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<raw_dataUpdateInput, raw_dataUncheckedUpdateInput>
  }


  /**
   * raw_data delete
   */
  export type raw_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
    /**
     * Filter which raw_data to delete.
     */
    where: raw_dataWhereUniqueInput
  }


  /**
   * raw_data deleteMany
   */
  export type raw_dataDeleteManyArgs = {
    /**
     * Filter which raw_data to delete
     */
    where?: raw_dataWhereInput
  }


  /**
   * raw_data without action
   */
  export type raw_dataArgs = {
    /**
     * Select specific fields to fetch from the raw_data
     */
    select?: raw_dataSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Fault_dataScalarFieldEnum: {
    id: 'id',
    magnitute: 'magnitute',
    date_utc: 'date_utc',
    fault_id: 'fault_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Fault_dataScalarFieldEnum = (typeof Fault_dataScalarFieldEnum)[keyof typeof Fault_dataScalarFieldEnum]


  export const FaultsScalarFieldEnum: {
    fault_id: 'fault_id',
    fault_name: 'fault_name',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type FaultsScalarFieldEnum = (typeof FaultsScalarFieldEnum)[keyof typeof FaultsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const Raw_dataScalarFieldEnum: {
    raw_id: 'raw_id',
    date_utc: 'date_utc',
    magnitute: 'magnitute',
    lat: 'lat',
    long: 'long',
    utm_x: 'utm_x',
    utm_y: 'utm_y',
    depth: 'depth',
    phase: 'phase',
    center_th: 'center_th',
    center_en: 'center_en',
    severity_level: 'severity_level',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Raw_dataScalarFieldEnum = (typeof Raw_dataScalarFieldEnum)[keyof typeof Raw_dataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type fault_dataWhereInput = {
    AND?: Enumerable<fault_dataWhereInput>
    OR?: Enumerable<fault_dataWhereInput>
    NOT?: Enumerable<fault_dataWhereInput>
    id?: IntFilter | number
    magnitute?: FloatFilter | number
    date_utc?: DateTimeFilter | Date | string
    fault_id?: IntNullableFilter | number | null
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type fault_dataOrderByWithRelationInput = {
    id?: SortOrder
    magnitute?: SortOrder
    date_utc?: SortOrder
    fault_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type fault_dataWhereUniqueInput = {
    id?: number
  }

  export type fault_dataOrderByWithAggregationInput = {
    id?: SortOrder
    magnitute?: SortOrder
    date_utc?: SortOrder
    fault_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: fault_dataCountOrderByAggregateInput
    _avg?: fault_dataAvgOrderByAggregateInput
    _max?: fault_dataMaxOrderByAggregateInput
    _min?: fault_dataMinOrderByAggregateInput
    _sum?: fault_dataSumOrderByAggregateInput
  }

  export type fault_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<fault_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<fault_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<fault_dataScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    magnitute?: FloatWithAggregatesFilter | number
    date_utc?: DateTimeWithAggregatesFilter | Date | string
    fault_id?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type faultsWhereInput = {
    AND?: Enumerable<faultsWhereInput>
    OR?: Enumerable<faultsWhereInput>
    NOT?: Enumerable<faultsWhereInput>
    fault_id?: IntFilter | number
    fault_name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type faultsOrderByWithRelationInput = {
    fault_id?: SortOrder
    fault_name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type faultsWhereUniqueInput = {
    fault_id?: number
  }

  export type faultsOrderByWithAggregationInput = {
    fault_id?: SortOrder
    fault_name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: faultsCountOrderByAggregateInput
    _avg?: faultsAvgOrderByAggregateInput
    _max?: faultsMaxOrderByAggregateInput
    _min?: faultsMinOrderByAggregateInput
    _sum?: faultsSumOrderByAggregateInput
  }

  export type faultsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<faultsScalarWhereWithAggregatesInput>
    OR?: Enumerable<faultsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<faultsScalarWhereWithAggregatesInput>
    fault_id?: IntWithAggregatesFilter | number
    fault_name?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type raw_dataWhereInput = {
    AND?: Enumerable<raw_dataWhereInput>
    OR?: Enumerable<raw_dataWhereInput>
    NOT?: Enumerable<raw_dataWhereInput>
    raw_id?: IntFilter | number
    date_utc?: DateTimeFilter | Date | string
    magnitute?: FloatFilter | number
    lat?: FloatFilter | number
    long?: FloatFilter | number
    utm_x?: IntFilter | number
    utm_y?: IntFilter | number
    depth?: IntNullableFilter | number | null
    phase?: IntNullableFilter | number | null
    center_th?: StringNullableFilter | string | null
    center_en?: StringNullableFilter | string | null
    severity_level?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type raw_dataOrderByWithRelationInput = {
    raw_id?: SortOrder
    date_utc?: SortOrder
    magnitute?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    utm_x?: SortOrder
    utm_y?: SortOrder
    depth?: SortOrder
    phase?: SortOrder
    center_th?: SortOrder
    center_en?: SortOrder
    severity_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type raw_dataWhereUniqueInput = {
    raw_id?: number
  }

  export type raw_dataOrderByWithAggregationInput = {
    raw_id?: SortOrder
    date_utc?: SortOrder
    magnitute?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    utm_x?: SortOrder
    utm_y?: SortOrder
    depth?: SortOrder
    phase?: SortOrder
    center_th?: SortOrder
    center_en?: SortOrder
    severity_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: raw_dataCountOrderByAggregateInput
    _avg?: raw_dataAvgOrderByAggregateInput
    _max?: raw_dataMaxOrderByAggregateInput
    _min?: raw_dataMinOrderByAggregateInput
    _sum?: raw_dataSumOrderByAggregateInput
  }

  export type raw_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<raw_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<raw_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<raw_dataScalarWhereWithAggregatesInput>
    raw_id?: IntWithAggregatesFilter | number
    date_utc?: DateTimeWithAggregatesFilter | Date | string
    magnitute?: FloatWithAggregatesFilter | number
    lat?: FloatWithAggregatesFilter | number
    long?: FloatWithAggregatesFilter | number
    utm_x?: IntWithAggregatesFilter | number
    utm_y?: IntWithAggregatesFilter | number
    depth?: IntNullableWithAggregatesFilter | number | null
    phase?: IntNullableWithAggregatesFilter | number | null
    center_th?: StringNullableWithAggregatesFilter | string | null
    center_en?: StringNullableWithAggregatesFilter | string | null
    severity_level?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type fault_dataCreateInput = {
    magnitute: number
    date_utc: Date | string
    fault_id?: number | null
    created_at: Date | string
    updated_at: Date | string
  }

  export type fault_dataUncheckedCreateInput = {
    id?: number
    magnitute: number
    date_utc: Date | string
    fault_id?: number | null
    created_at: Date | string
    updated_at: Date | string
  }

  export type fault_dataUpdateInput = {
    magnitute?: FloatFieldUpdateOperationsInput | number
    date_utc?: DateTimeFieldUpdateOperationsInput | Date | string
    fault_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type fault_dataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    magnitute?: FloatFieldUpdateOperationsInput | number
    date_utc?: DateTimeFieldUpdateOperationsInput | Date | string
    fault_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type fault_dataCreateManyInput = {
    id?: number
    magnitute: number
    date_utc: Date | string
    fault_id?: number | null
    created_at: Date | string
    updated_at: Date | string
  }

  export type fault_dataUpdateManyMutationInput = {
    magnitute?: FloatFieldUpdateOperationsInput | number
    date_utc?: DateTimeFieldUpdateOperationsInput | Date | string
    fault_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type fault_dataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    magnitute?: FloatFieldUpdateOperationsInput | number
    date_utc?: DateTimeFieldUpdateOperationsInput | Date | string
    fault_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type faultsCreateInput = {
    fault_name: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type faultsUncheckedCreateInput = {
    fault_id?: number
    fault_name: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type faultsUpdateInput = {
    fault_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type faultsUncheckedUpdateInput = {
    fault_id?: IntFieldUpdateOperationsInput | number
    fault_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type faultsCreateManyInput = {
    fault_id?: number
    fault_name: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type faultsUpdateManyMutationInput = {
    fault_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type faultsUncheckedUpdateManyInput = {
    fault_id?: IntFieldUpdateOperationsInput | number
    fault_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type raw_dataCreateInput = {
    date_utc: Date | string
    magnitute: number
    lat: number
    long: number
    utm_x: number
    utm_y: number
    depth?: number | null
    phase?: number | null
    center_th?: string | null
    center_en?: string | null
    severity_level: number
    created_at: Date | string
    updated_at: Date | string
  }

  export type raw_dataUncheckedCreateInput = {
    raw_id?: number
    date_utc: Date | string
    magnitute: number
    lat: number
    long: number
    utm_x: number
    utm_y: number
    depth?: number | null
    phase?: number | null
    center_th?: string | null
    center_en?: string | null
    severity_level: number
    created_at: Date | string
    updated_at: Date | string
  }

  export type raw_dataUpdateInput = {
    date_utc?: DateTimeFieldUpdateOperationsInput | Date | string
    magnitute?: FloatFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    utm_x?: IntFieldUpdateOperationsInput | number
    utm_y?: IntFieldUpdateOperationsInput | number
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    phase?: NullableIntFieldUpdateOperationsInput | number | null
    center_th?: NullableStringFieldUpdateOperationsInput | string | null
    center_en?: NullableStringFieldUpdateOperationsInput | string | null
    severity_level?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type raw_dataUncheckedUpdateInput = {
    raw_id?: IntFieldUpdateOperationsInput | number
    date_utc?: DateTimeFieldUpdateOperationsInput | Date | string
    magnitute?: FloatFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    utm_x?: IntFieldUpdateOperationsInput | number
    utm_y?: IntFieldUpdateOperationsInput | number
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    phase?: NullableIntFieldUpdateOperationsInput | number | null
    center_th?: NullableStringFieldUpdateOperationsInput | string | null
    center_en?: NullableStringFieldUpdateOperationsInput | string | null
    severity_level?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type raw_dataCreateManyInput = {
    raw_id?: number
    date_utc: Date | string
    magnitute: number
    lat: number
    long: number
    utm_x: number
    utm_y: number
    depth?: number | null
    phase?: number | null
    center_th?: string | null
    center_en?: string | null
    severity_level: number
    created_at: Date | string
    updated_at: Date | string
  }

  export type raw_dataUpdateManyMutationInput = {
    date_utc?: DateTimeFieldUpdateOperationsInput | Date | string
    magnitute?: FloatFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    utm_x?: IntFieldUpdateOperationsInput | number
    utm_y?: IntFieldUpdateOperationsInput | number
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    phase?: NullableIntFieldUpdateOperationsInput | number | null
    center_th?: NullableStringFieldUpdateOperationsInput | string | null
    center_en?: NullableStringFieldUpdateOperationsInput | string | null
    severity_level?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type raw_dataUncheckedUpdateManyInput = {
    raw_id?: IntFieldUpdateOperationsInput | number
    date_utc?: DateTimeFieldUpdateOperationsInput | Date | string
    magnitute?: FloatFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    utm_x?: IntFieldUpdateOperationsInput | number
    utm_y?: IntFieldUpdateOperationsInput | number
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    phase?: NullableIntFieldUpdateOperationsInput | number | null
    center_th?: NullableStringFieldUpdateOperationsInput | string | null
    center_en?: NullableStringFieldUpdateOperationsInput | string | null
    severity_level?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type fault_dataCountOrderByAggregateInput = {
    id?: SortOrder
    magnitute?: SortOrder
    date_utc?: SortOrder
    fault_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type fault_dataAvgOrderByAggregateInput = {
    id?: SortOrder
    magnitute?: SortOrder
    fault_id?: SortOrder
  }

  export type fault_dataMaxOrderByAggregateInput = {
    id?: SortOrder
    magnitute?: SortOrder
    date_utc?: SortOrder
    fault_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type fault_dataMinOrderByAggregateInput = {
    id?: SortOrder
    magnitute?: SortOrder
    date_utc?: SortOrder
    fault_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type fault_dataSumOrderByAggregateInput = {
    id?: SortOrder
    magnitute?: SortOrder
    fault_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type faultsCountOrderByAggregateInput = {
    fault_id?: SortOrder
    fault_name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type faultsAvgOrderByAggregateInput = {
    fault_id?: SortOrder
  }

  export type faultsMaxOrderByAggregateInput = {
    fault_id?: SortOrder
    fault_name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type faultsMinOrderByAggregateInput = {
    fault_id?: SortOrder
    fault_name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type faultsSumOrderByAggregateInput = {
    fault_id?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type raw_dataCountOrderByAggregateInput = {
    raw_id?: SortOrder
    date_utc?: SortOrder
    magnitute?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    utm_x?: SortOrder
    utm_y?: SortOrder
    depth?: SortOrder
    phase?: SortOrder
    center_th?: SortOrder
    center_en?: SortOrder
    severity_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type raw_dataAvgOrderByAggregateInput = {
    raw_id?: SortOrder
    magnitute?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    utm_x?: SortOrder
    utm_y?: SortOrder
    depth?: SortOrder
    phase?: SortOrder
    severity_level?: SortOrder
  }

  export type raw_dataMaxOrderByAggregateInput = {
    raw_id?: SortOrder
    date_utc?: SortOrder
    magnitute?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    utm_x?: SortOrder
    utm_y?: SortOrder
    depth?: SortOrder
    phase?: SortOrder
    center_th?: SortOrder
    center_en?: SortOrder
    severity_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type raw_dataMinOrderByAggregateInput = {
    raw_id?: SortOrder
    date_utc?: SortOrder
    magnitute?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    utm_x?: SortOrder
    utm_y?: SortOrder
    depth?: SortOrder
    phase?: SortOrder
    center_th?: SortOrder
    center_en?: SortOrder
    severity_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type raw_dataSumOrderByAggregateInput = {
    raw_id?: SortOrder
    magnitute?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    utm_x?: SortOrder
    utm_y?: SortOrder
    depth?: SortOrder
    phase?: SortOrder
    severity_level?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}